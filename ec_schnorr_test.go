package zillean

import (
	"encoding/hex"
	"fmt"
	"testing"

	. "github.com/smartystreets/goconvey/convey"
)

func TestECSchnorr_GeneratePrivateKey(t *testing.T) {
	Convey("returns the new private key from random seed", t, func() {
		result := NewECSchnorr().GeneratePrivateKey()
		So(result, ShouldHaveLength, 32)
		So(result, ShouldHaveSameTypeAs, []uint8{})
	})
}

func TestECSchnorr_GetPublicKey(t *testing.T) {
	Convey("returns the public key from the private key", t, func() {
		for _, vector := range testVectors {
			privKey, _ := hex.DecodeString(vector.privateKey)
			pubKey, _ := hex.DecodeString(vector.publicKey)
			So(NewECSchnorr().GetPublicKey(privKey, true), ShouldResemble, pubKey)
		}
	})
}

func TestECSchnorr_TrySign(t *testing.T) {
	Convey("returns the signature on a given message", t, func() {
		ecs := NewECSchnorr()
		privKey, _ := hex.DecodeString("0F494B8312E8D257E51730C78F8FE3B47B6840C59AAAEC7C2EBE404A2DE8B25A")
		pubKey, _ := hex.DecodeString("039E43C9810E6CC09F46AAD38E716DAE3191629534967DC457D3A687D2E2CDDC6A")
		k, _ := hex.DecodeString("532B2267C4A3054F380B3357339BDFB379E88366FE61B42ACA05F69BC3F6F54E")
		msg, _ := hex.DecodeString
		r, s, err := ecs.trySign(privKey, pubKey, k, msg)
		So(err, ShouldBeNil)
		So(fmt.Sprintf("%x", r), ShouldEqual, "3af3d288e830e96ff8ed0769f45abda774cd989e2ae32ef9e985c8505f14ff98")
		So(fmt.Sprintf("%x", s), ShouldEqual, "e191eb14a70b5b53ada45afff4a04578f5d8bb2b1c8a22985ea159b53826cde7")
	})
}

func TestECSchnorr_Sign_And_Verify(t *testing.T) {
	Convey("sign and validate the signature", t, func() {
		ecs := NewECSchnorr()
		privKey := ecs.GeneratePrivateKey()
		pubKey := ecs.GetPublicKey(privKey, false)
		msg := []byte("message")
		r, s := ecs.Sign(privKey, pubKey, msg)
		So(ecs.Verify(r, s, pubKey, msg), ShouldBeTrue)
	})
}
